{-# STDLIB_VERSION 4 #-}
{-# CONTENT_TYPE EXPRESSION #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let DIGILIRAPAY = base58'4snGCeL4Wjopx9awWd7pfdqUYyN1CLqbPz66bn7VY8oe'
let GATEWAY = base58'ActWMpdeyp8YHRhLxXmwdJmr37VXGgb44m8DuSVJW3k1'

let SPONSORTOKEN = base58'HLfv6YiY1ZpDktcKL9R79FTcez9WdMjaeMWxhREGcAqr'
let PAYMENTTOKEN = base58'HDBmVe4MFyVdh1Jy48m9XqXiHAVuNbwFB8dPskVMHS6B'
let RECOVERYTOKEN = base58'HL1XtTLSdKMxB8LrkRYszqwtiSRepGTBBdnyrCqgaEVX'
let PROXYWAVES = base58'WAVES'

let RECOVERY1 = base58'2tKRd22A8nkVNjtgT7JJxqSR8D9EA2RfsprJt35jw8Hr'
let RECOVERY2 = base58'9cxzRSwiomyztUboaxherWQUUMGqZ3yX2nYrUa6XR9bT'
let RECOVERY3 = base58'BCAaT65dW2nviLrwdqtoWFJP9D8z3576qFYKkHQ4wxPt'

let BANNED = 403000

let DIGILIRAPAYONLY = 99
let TRANSFERBLOCK = 100
let PAYMENTBLOCK = 200
let PAYMENTFUNDBLOCK = 300
let FUNDBLOCK = 400

func recovery() = {
    let s1 = if(sigVerify(tx.bodyBytes, tx.proofs[0], RECOVERY1 )) then 1 else 0
    let s2 = if(sigVerify(tx.bodyBytes, tx.proofs[1], RECOVERY2 )) then 1 else 0
    let s3 = if(sigVerify(tx.bodyBytes, tx.proofs[2], RECOVERY3 )) then 1 else 0

    if (s1 + s2 + s3 >= 2) then {
        true 
    } else {
        throw("Unauthorized")
    }
}

func checkFee(w:TransferTransaction) = {
    let fee = w.fee

    let isFeePaymentToken = w.feeAssetId == PAYMENTTOKEN
    let isFeeSponsorToken = w.feeAssetId == SPONSORTOKEN
    
    let unScriptedFee = 5
    let scriptedFee = 9

    let isScripted = match assetInfo(valueOrElse(w.assetId, PROXYWAVES)) {
        case asset:Asset =>
        if (asset.scripted) then {
            true
        } else {
            false
        }
        case _ => 
            false
    }

    if (!isFeePaymentToken && !isFeeSponsorToken) then {
        sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey) 
    } else {
        if ((isScripted && fee == scriptedFee) || (!isScripted && fee == unScriptedFee)) then {
            sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
        } else {
            throw(toString(fee) + " feeAmount is wrong")     
        }
    } 
}

func getStatus(key: ByteVector) = {
    getInteger(addressFromPublicKey(DIGILIRAPAY), toBase58String(key)).valueOrElse(0)
}

match (tx) {
    case w:TransferTransaction  =>
        let myStatus = getStatus((w.sender.bytes))
        let recipientStatus = getStatus((addressFromRecipient(w.recipient).bytes))
        let assetStatus = getStatus((valueOrElse(w.assetId, PROXYWAVES)))

        let digiliraRecipient = recipientStatus > 0

        let myStatusBanned = myStatus == BANNED
        let recipientStatusBanned = recipientStatus == BANNED
        let assetStatusBanned = assetStatus == BANNED

        let isFeeRecoveryToken = w.feeAssetId == RECOVERYTOKEN
        let isRecipientGateway = w.recipient == addressFromPublicKey(GATEWAY)

        let isFeePaymentToken = w.feeAssetId == PAYMENTTOKEN
        let isFeeSponsorToken = w.feeAssetId == SPONSORTOKEN

        let isExclusiveToken = DIGILIRAPAYONLY == valueOrElse(assetStatus,0)
        let isDigiliraPayExclusive = DIGILIRAPAYONLY > valueOrElse(assetStatus,0)

        let permissionTransferToDP = valueOrElse(recipientStatus,0) < valueOrElse(assetStatus,BANNED) || valueOrElse(myStatus,0) < valueOrElse(assetStatus,BANNED)
        let permissionPayment = FUNDBLOCK > valueOrElse(assetStatus,0) && PAYMENTBLOCK <= valueOrElse(assetStatus,0)
        let permissionTransferNotDP = TRANSFERBLOCK > valueOrElse(assetStatus,0) || PAYMENTFUNDBLOCK <= valueOrElse(assetStatus,0)

        let isRecovery = digiliraRecipient && isFeeRecoveryToken && isRecipientGateway && myStatusBanned

        if (isRecovery && recovery()) then {
            true
        } else if (digiliraRecipient) then {
            
            let prolog = "Transfer to DigiliraPay recipient: "

            if (myStatusBanned) then {
                throw(prolog + "This account has been suspended.")
            } else if (recipientStatusBanned) then {
                throw(prolog + "Recipient's account has been suspended.")
            } else if (assetStatusBanned) then {
                throw(prolog + "Asset cannot be transfered.")
            } else if (permissionTransferToDP) then {
                throw(prolog + "Asset cannot be transfered. Recipient/Sender is not eligible.")
            } else if (isDigiliraPayExclusive) then {
                throw(prolog + "Non-Transferable Token.")
            } else if (isRecipientGateway) then {

                if (permissionPayment || isExclusiveToken) then {
                    checkFee(w)
                } else {
                    throw(prolog + "Asset cannot be used on payments.")
                }
            } else {

                if (isFeePaymentToken) then { 
                    throw(prolog + "Payment Token cannot be used.")
                } else {
                    checkFee(w)
                }
            }
        } else {

            let prolog = "Transfer to not DigiliraPay recipient: ";

            if (isFeePaymentToken) then {
                throw(prolog + "Payment Token cannot be used.")
            } else if (myStatusBanned) then {
                throw(prolog + "This account has been suspended.")
            } else if (permissionTransferNotDP) then {
                throw(prolog + "This asset cannot be transfered.")
            } else {
                sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
            }
        }
    case t:SetScriptTransaction | DataTransaction =>
        let s1 = if(sigVerify(t.bodyBytes, t.proofs[0], t.senderPublicKey)) then 1 else 0
        let s2 = if(sigVerify(t.bodyBytes, t.proofs[1], DIGILIRAPAY)) then 1 else 0

        if (s1 + s2 == 2) then {
            true 
        } else {
            throw("Integrity Check Failed!")
        }
    case x: LeaseTransaction | LeaseCancelTransaction | InvokeScriptTransaction => {
        sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
    }
    case _ =>
        recovery()
 }
