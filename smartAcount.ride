{-# STDLIB_VERSION 4 #-}
{-# CONTENT_TYPE EXPRESSION #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let digiliraPay = base58'4snGCeL4Wjopx9awWd7pfdqUYyN1CLqbPz66bn7VY8oe'
let gateway = base58'ActWMpdeyp8YHRhLxXmwdJmr37VXGgb44m8DuSVJW3k1'

let sponsorToken = base58'HLfv6YiY1ZpDktcKL9R79FTcez9WdMjaeMWxhREGcAqr'
let paymentToken = base58'HDBmVe4MFyVdh1Jy48m9XqXiHAVuNbwFB8dPskVMHS6B'
let recoveryToken = base58'HL1XtTLSdKMxB8LrkRYszqwtiSRepGTBBdnyrCqgaEVX'
let proxyWaves = base58'WAVES'

let recovery1 = base58'2tKRd22A8nkVNjtgT7JJxqSR8D9EA2RfsprJt35jw8Hr'
let recovery2 = base58'9cxzRSwiomyztUboaxherWQUUMGqZ3yX2nYrUa6XR9bT'
let recovery3 = base58'BCAaT65dW2nviLrwdqtoWFJP9D8z3576qFYKkHQ4wxPt'

let banned = 403000
let KYCPending = 0

let nonFungibleBlock = 50
let digiliraPayOnly = 99
let transferBlock = 100
let paymentBlock = 200
let fundBlock = 300
let paymentFundBlock = 400
let upperBlock = 500

match (tx) {
    case w:TransferTransaction  =>
        let myStatus = getInteger(addressFromPublicKey(digiliraPay), toBase58String(w.sender.bytes))
        let isUser =  getInteger(addressFromPublicKey(digiliraPay), toBase58String(addressFromRecipient(w.recipient).bytes))

        let feeToken = w.feeAssetId
        let feeAmount = w.fee

        let asset = valueOrElse(w.assetId, proxyWaves)
        let isAsset =  getInteger(addressFromPublicKey(digiliraPay), toBase58String(asset))
         
       if (isDefined(isUser)) then { # is recipient a DP user
                if (isDefined(feeToken)) then {
                    if (feeToken == sponsorToken) then {
                        if (isDefined(isAsset)) then {
                            if (isAsset == banned) then {
                                throw("This asset cannot be transfered.")
                            } else if ((digiliraPayOnly <= valueOrElse(isAsset,0) && upperBlock >= valueOrElse(isAsset,0)))  then { # is asset eligible
                                if (valueOrElse(isUser,0) >= valueOrElse(isAsset,banned) && valueOrElse(myStatus,0) >= valueOrElse(isAsset,banned)) then { # is recipient eligible
                                    sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey) 
                                } else {
                                    throw("To transfer this asset user permission must be set correctly.")
                                }
                            } else {
                                throw("Transfer is not available right now.")
                            }
                        } else {
                            sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)  # not defined - any coin
                        }
                    } else if (feeToken == paymentToken) then {  # payment block
                        if (w.recipient == addressFromPublicKey(gateway)) then {
                            if (myStatus == KYCPending) then {
                                throw("KYC Pending")
                            } else if (myStatus == banned) then {
                                throw("Account has been banned payment option is disabled.")
                            } else {
                                if feeAmount > 10 then {
                                throw("Not allowed")
                            } else {
                            if (isAsset == banned) then {
                                throw("This asset has been locked")
                            } else if (isAsset == digiliraPayOnly) then {
                                sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey) 
                            } else if ((paymentBlock <= valueOrElse(isAsset,0) && fundBlock >= valueOrElse(isAsset,0)) || (paymentFundBlock <= valueOrElse(isAsset,0) && upperBlock >= valueOrElse(isAsset,0) )) then { # is recipient eligible
                                if (valueOrElse(myStatus,0) >= valueOrElse(isAsset,banned)) then { # is recipient eligible
                                    sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey) 
                                } else {
                                    throw("You can hold this token but you cannot use it for payments.")
                                }
                            } else {
                                throw("This asset cannot be used for payments.")
                            }
                            }
                            }
                        } else {
                        throw("Unfortunately you can only use this token for payment transfers.")
                        }
                    } else if (feeToken == recoveryToken) then {  # fund recovery block
                        if (w.recipient == addressFromPublicKey(gateway)) then {
                            if (myStatus == banned) then {
                                
                                let recovery1Signed = if(sigVerify(tx.bodyBytes, tx.proofs[0], recovery1 )) then 1 else 0
                                let recovery2Signed = if(sigVerify(tx.bodyBytes, tx.proofs[1], recovery2 )) then 1 else 0
                                let recovery3Signed = if(sigVerify(tx.bodyBytes, tx.proofs[2], recovery3 )) then 1 else 0

                                if (recovery1Signed + recovery2Signed + recovery2Signed >= 2) then {
                                    true 
                                }else {
                                    throw("Unauthorized")
                                }
                            } else {
                                throw("Unauthorized")
                            } 
                        } else {
                                throw("Unauthorized")
                        }
                    } else {
                        if (isDefined(isAsset)) then {
                            if (isAsset == banned) then {
                                throw("This asset cannot be transfered.")
                            } else if (valueOrElse(isUser,0) >= valueOrElse(isAsset,banned) && valueOrElse(myStatus,0) >= valueOrElse(isAsset,banned)) then { # is recipient eligible
                                sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey) 
                            } else {
                                throw("You can hold this token but you cannot transfer to another user.")
                            }
                        } else {
                            sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey) 
                        }
                    }
                } else {
                    if (isDefined(isAsset)) then {  # waves as feetoken
                        if (valueOrElse(isAsset,0) == banned) then {
                            throw("Can not transfer this asset")
                        } else if (valueOrElse(isUser,0) >= valueOrElse(isAsset,banned) && valueOrElse(myStatus,0) >= valueOrElse(isAsset,banned)) then { # is recipient eligible
                            sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey) 
                        } else {
                            throw("You can hold this token but you cannot transfer to another user.")
                        }
                    } else {
                        sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey) 
                    }
                }
        } else {
            if (isDefined(isAsset)) then {
                if ((transferBlock <= valueOrElse(isAsset,0) && fundBlock >= valueOrElse(isAsset,0)))  then {
                    if (isDefined(feeToken)) then { 
                        if (feeToken == sponsorToken) then {
                            throw("Cannot use this token for none DigiliraPay users transfers.") 
                        } else if (feeToken == paymentToken) then {                         
                            throw("Unfortunately you can only use this token for payments") 
                        } else {
                            sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey) 
                    }
                } else {
                    sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey) 
                }
                }else{
                    throw("Cannot transfer this token to none DigiliraPay users.") 
                }
                } else {
                    if (isDefined(feeToken)) then { 
                        if (feeToken == sponsorToken) then {
                            throw("Cannot use this token for none DigiliraPay users transfers.") 
                        } else if (feeToken == paymentToken) then {                         
                            throw("Unfortunately you can only use this token for payments") 
                        } else {
                            sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey) 
                    }
                } else {
                    sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey) 
                } 
            }
        }
    case x:BurnTransaction | LeaseTransaction | Order =>
        false
    
    case t:SetScriptTransaction | ExchangeTransaction | DataTransaction =>
        sigVerify(t.bodyBytes, t.proofs[1], digiliraPay) 
    
    case mtt:MassTransferTransaction => 
        false
    case _ =>
        false
 }
